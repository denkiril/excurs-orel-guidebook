// import { writeFile } from 'fs';

const { mkdir, writeFile } = require('fs');
const { dirname } = require('path');
const { argv } = require('yargs');
const { version } = require('../package.json');
require('dotenv').config(); // read environment variables from .env file

const ENV_TYPES = ['prod', 'dev'] as const; // 'prod_server', 'dev_server'
type EnvironmentType = (typeof ENV_TYPES)[number];

let envType: EnvironmentType = argv.environment;
if (!ENV_TYPES.includes(envType)) {
  console.log('environment argument not setted, using "prod"...');
  envType = 'prod';
}

const isProduction = envType === 'prod';

// browser env vars
const environmentFilePath = `./src/environments/environment._${envType}.ts`;

const environmentFileContent = `// Autogenerated from .env file by setenv.ts script

export const environment = {
  production: ${isProduction},
  VERSION: '${isProduction ? version : 'develop'}',
  BASE_URL: '${process.env.EXOGB_BASE_URL || ''}',
  API_URL: '${process.env.EXOGB_API_URL || ''}',
  YMAPS_APIKEY: '${process.env.EXOGB_YMAPS_APIKEY || ''}',
  ASSETS_URL: '${process.env.EXOGB_ASSETS_URL || ''}',
  IS_DEV: ${Boolean(process.env.EXOGB_IS_DEV)},
};
`;

writeFile(environmentFilePath, environmentFileContent, (err: any) => {
  if (err) console.log(err);
  console.log(`Wrote variables to ${environmentFilePath}`);
});

// server env vars
const envVarsForServerFilePath = `./src/server_assets/.env`;

const envVarsForServerFileContent = `
  EXOGB_MKRF_OPENDATA_APIKEY=${process.env.EXOGB_MKRF_OPENDATA_APIKEY}
  EXOGB_LOGS_PATH=${process.env.EXOGB_LOGS_PATH}
`;

mkdir(dirname(envVarsForServerFilePath), { recursive: true }, (err: any) => {
  if (err) console.log(err);

  writeFile(
    envVarsForServerFilePath,
    envVarsForServerFileContent,
    (err: any) => {
      if (err) console.log(err);
      console.log(`Wrote variables to ${envVarsForServerFilePath}`);
      // console.log('env:', process.env);
    },
  );
});
